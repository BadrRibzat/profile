// scripts/convert-fonts-to-base64.js
const fs = require('fs');
const path = require('path');

// Define paths
const fontsDir = path.join(__dirname, '../public/fonts');
const outputFile = path.join(__dirname, '../utils/fontsBase64.ts'); // Using a .ts extension

// List of fonts to convert
const fontFiles = [
  'NotoSans-Regular.ttf',
  'NotoSans-Bold.ttf',
  'NotoSansArabic-Regular.ttf',
  'NotoSansArabic-Bold.ttf',
  'NotoSansJP-Regular.ttf',
  'NotoSansJP-Bold.ttf',
];

console.log('Starting font to base64 conversion...');

let outputContent = `// This file is auto-generated by scripts/convert-fonts-to-base64.js
// Do not edit this file directly.
// Generated on: ${new Date().toISOString()}
`;

let successCount = 0;

for (const filename of fontFiles) {
  const fontPath = path.join(fontsDir, filename);

  if (fs.existsSync(fontPath)) {
    try {
      const fontBuffer = fs.readFileSync(fontPath);
      const base64String = fontBuffer.toString('base64');
      const dataUrl = `data:font/truetype;base64,${base64String}`;
      
      // Create a clean variable name (e.g., NotoSans-Regular -> NotoSans_Regular)
      const varName = path.basename(filename, '.ttf').replace(/-/g, '_');
      
      outputContent += `export const ${varName} = '${dataUrl}';
`;
      console.log(`✅ Successfully converted: ${filename}`);
      successCount++;
    } catch (error) {
      console.error(`❌ Failed to read or convert ${filename}:`, error);
    }
  } else {
    console.error(`❌ Font file not found: ${fontPath}`);
  }
}

try {
  fs.writeFileSync(outputFile, outputContent);
  if (successCount > 0) {
    console.log(`
✅ Success! Font data written to ${outputFile}`);
  } else {
    console.error(`
❌ No fonts were converted. Please check file paths.`);
  }
} catch (error) {
  console.error(`❌ Failed to write to output file ${outputFile}:`, error);
}
